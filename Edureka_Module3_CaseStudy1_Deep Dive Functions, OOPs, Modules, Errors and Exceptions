                        Module 3 – Deep Dive - Functions, OOPs, Modules, Errors and Exceptions
Case Study Solution

1. A Robot moves in a Plane starting from the origin point (0,0). The robot can move toward UP, DOWN, LEFT, RIGHT. 
The trace of Robot movement is as given following:
UP 5
DOWN 3
LEFT 3
RIGHT 2
The numbers after directions are steps. Write a program to compute the distance current position after sequence of movements.
Hint: Use math module.

Solution
import math 
pos = [0,0] 
while True: 
  s = input("Enter trace") 
  if not s: 
    break 
  movement = s.split(" ") 
  direction = movement[0] 
  steps = int(movement[1]) 
  if direction=="UP": 
    pos[0]+=steps 
  elif direction=="DOWN": 
    pos[0]-=steps 
  elif direction=="LEFT": 
    pos[1]-=steps 
  elif direction=="RIGHT": 
    pos[1]+=steps 
  else: 
    pass 
print(int(round(math.sqrt(pos[1]**2+pos[0]**2))))
=======================================================================================================================================
2. Data of XYZ company is stored in sorted list. Write a program for searching specific data from that list. 
Hint: Use if/elif to deal with conditions.

Solution
import math 
def bin_search(li, element): 
  bottom = 0 
  top = len(li)-1 
  index = -1 
  while top>=bottom and index==-1: 
    mid = int(math.floor((top+bottom)/2.0)) 
    if li[mid]==element: 
      index = mid 
    elif li[mid]>element: 
      top = mid-1 
    else: 
      bottom = mid+1 
   
   return(index) li=[1,11,23,34,45,56] print(bin_search(li,11)) print(bin_search(li,12))
=======================================================================================================================================
3. Weather forecasting organization wants to show is it day or night. So, write a program for such organization to find 
whether is it dark outside or not.
Hint: Use time module.

Solution
import time 
print("Is it dark outside?\n==================") 
#month_number : sunset_hour 
dark = { 1: 16, 2: 17, 3: 18, 4: 19, 5: 19, 6: 20, 7: 20, 8: 19, 9: 18, 10: 17, 11: 17, 12: 16 } 
#month_number : sunrise_hour 
light = { 1: 8, 2: 7, 3: 6, 4: 5, 5: 4, 6: 4, 7: 4, 8: 5, 9: 6, 10: 6, 11: 7, 12: 8 } 
#get the structure containing the current time 
time_now = time.localtime() 
#use the 'light' and 'dark' dictionaries 
#it's dark if the hour is later than or equal to the sunset time 
#or earlier than the sunrise time. 
if time_now.tm_hour >=dark[time_now.tm_mon] or time_now.tm_hour < light[time_now.tm_mon]: 
  print("Yes") 
else: 
  print("No")
========================================================================================================================================
4. Write a program to find distance between two locations when their latitude and longitudes are given.
Hint: Use math module.

Solution

from math import sin, cos, sqrt, atan2, radians 
# approximate radius of earth in km 
R = 6373.0 
lat1 = radians(52.2296756) 
lon1 = radians(21.0122287) 
lat2 = radians(52.406374) 
lon2 = radians(16.9251681) 
dlon = lon2 - lon1 
dlat = lat2 - lat1 

a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2 
c = 2 * atan2(sqrt(a), sqrt(1 - a)) 
distance = R * c 
print("Result:", distance) 
print("Should be:", 278.546, "km")
========================================================================================================================================
5. Design a software for bank system. There should be options like cash withdraw, cash credit and change password. 
According to user input, the software should provide required output.
Hint: Use if else statements and functions.

Solution 

Total=0 
current=50000 # current balance 

def withdraw(): 
  with_amount=input("Enter withdraw amount") 
  Total= current-int(with_amount)
  print("Your account balance is: ",Total) 
  return() 
  
def credit(): 
  credit_amount=input("Enter amount to be credited") 
  Total=current+int(credit_amount) 
  print("Your account balance is: ", Total) 
  return() 
  
def change_pass(): 
  old=input("Enter old password") 
  new=input("Enter new password") 
  print("You password is changed: ",new) 
  
acco_no=input("Enter your account number") 
choice=input("Enter your choice: 1: Cash withdraw \n 2: Cash Credit \n 3: Change password") 
if(choice=='1'): 
  withdraw() 
elif(choice=='2'): 
  credit() 
else: 
  change_pass()
========================================================================================================================================  
6. Write a program which will find all such numbers which are divisible by 7 but are not a multiple of 5, 
between 2000 and 3200 (both included). The numbers obtained should be printed in a comma-separated sequence on a single line.

Solution 

l=[] 
for i in range(2000, 3201): 
  if (i%7==0) and (i%5!=0): 
  l.append(str(i))
print(','.join(l))
========================================================================================================================================
7. Write a program which can compute the factorial of a given numbers. Use recursion to find it.
Hint: Suppose the following input is supplied to the program:
8
Then, the output should be:
40320

Solution 
def fact(x): 
  if x == 0: 
    return 1 
  return x * fact(x - 1) 
  
x=int(input("Enter number whos factorial you want to find")) 
print(fact(x))
========================================================================================================================================
8. Write a program that calculates and prints the value according to the given formula:
Q = Square root of [(2 * C * D)/H]
Following are the fixed values of C and H: C is 50. H is 30.
D is the variable whose values should be input to your program in a comma- separated sequence.
Example:
Let us assume the following comma separated input sequence is given to the program:
100,150,180
The output of the program should be:
18,22,24

Solution 

import math 
c=50 
h=30 
value = [] 
items=[x for x in (input('Enter number')).split(',')] 
for d in items: 
  value.append(str(int(round(math.sqrt(2*c*float(d)/h))))) 
print(','.join(value))
========================================================================================================================================
9. Write a program which takes 2 digits, X,Y as input and generates a 2-dimensional array. The element value in the i-th row and 
j-th column of the array should be i*j.
Note: i=0,1.., X-1; j=0,1,¡Y-1.
Example:
Suppose the following inputs are given to the program:
3,5
Then, the output of the program should be:
[[0, 0, 0, 0, 0], [0, 1, 2, 3, 4], [0, 2, 4, 6, 8]]

Solution 

input_str = input("Enter dimensions of array") 
dimensions=[int(x) for x in input_str.split(',')] 
rowNum=dimensions[0] 
colNum=dimensions[1] 
multilist = [[0 for col in range(colNum)] for row in range(rowNum)] 
for row in range(rowNum): 
  for col in range(colNum): 
    multilist[row][col]= row*col 
print(multilist)
========================================================================================================================================
10. Write a program that accepts a comma separated sequence of words as input and prints the words in a comma-separated sequence 
after sorting them alphabetically.
Suppose the following input is supplied to the program:
without,hello,bag,world
Then, the output should be:
bag,hello,without,world

Solution 

items=[x for x in input('Enter strings').split(',')] 
items.sort() 
print(','.join(items))
========================================================================================================================================
11. Write a program that accepts sequence of lines as input and prints the lines after making all characters in the sentence 
capitalized.
Suppose the following input is supplied to the program:
Hello world
Practice makes perfect
Then, the output should be:
HELLO WORLD
PRACTICE MAKES PERFECT

Solution 

lines = [] 
while True: 
  s = input("Enter string") 
  if s: 
    lines.append(s.upper()) 
  else: 
    break; 

for sentence in lines: 
  print(sentence)
========================================================================================================================================
12. Write a program that accepts a sequence of whitespace separated words as input and prints the words after removing 
all duplicate words and sorting them alphanumerically.
Suppose the following input is supplied to the program:
hello world and practice makes perfect and hello world again
Then, the output should be:
again and hello makes perfect practice world

Solution 

s = input("Enter strings separated by whitespaces") 
words = [word for word in s.split(" ")] 
print(" ".join(sorted(list(set(words)))))
=======================================================================================================================================
13. Write a program which accepts a sequence of comma separated 4 digit binary numbers as its input and then check whether 
they are divisible by 5 or not. The numbers that are divisible by 5 are to be printed in a comma separated sequence.
Example:
0100,0011,1010,1001
Then the output should be:
1010

Solution 
value = [] 
items=[x for x in input("Ener 4 binary numbers").split(',')] 
for p in items: 
  intper = int(p, 2) 
  if not intper%5: 
    value.append(p) 
print(','.join(value))
========================================================================================================================================
14. Write a program that accepts a sentence and calculate the number of upper case letters and lower case letters.
Suppose the following input is supplied to the program:
Hello world!
Then, the output should be:
UPPER CASE 1
LOWER CASE 9

Solution 

s = input('Enter string') 
d={"UPPER CASE":0, "LOWER CASE":0} 
for c in s: 
  if c.isupper(): 
    d["UPPER CASE"]+=1 
  elif c.islower(): 
    d["LOWER CASE"]+=1 
  else: 
    pass 
print("UPPER CASE", d["UPPER CASE"]) 
print("LOWER CASE", d["LOWER CASE"])
========================================================================================================================================
15. Give example of fsum and sum function of math library.

Solution 

import math 
print(sum([.1, .1, .1, .1, .1, .1, .1, .1, .1, .1]))
