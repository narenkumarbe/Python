                                                        Case Study Solution
Domain – E-Commerce
focus - Optimization

Business challenge/requirement
GoodsKart—largest ecommerce company of Indonesia with revenue of $2B+ acquired another ecommerce company FairDeal. 
FairDeal has its own IT system to maintain records of customer, sales etc. For ease of maintenance and cost savings GoodsKart is 
integrating customer databases of both the organizations hence customer data of FairDeal has to be converted in GoodsKart Customer 
Format.

Key issues
GoodsKart customer data has more fields than in FairDeal customer data. Hence FairDeal data needs to be split and stored in 
GoodsKart Customer Object Oriented Data Structure

Considerations
System should convert the data at run time

Data volume
- NA

Additional information
- NA

Business benefits
GoodsKart can eventually sunset IT systems of FairDeal and reduce IT cost by 20-30%

Approach to Solve
You have to use fundamentals of Python taught in module 3.
1. Read FairDealCustomerData.csv
2. Name field contains full name – use regular expression to separate title, first name, last name
3. Store the data in Customer Class
4. Create Custom Exception – CustomerNotAllowedException
5. Pass a customer to function "createOrder" and throw CustomerNotAllowedException in case of blacklisted value is 1

Enhancements for code
You can try these enhancements in code
1. Change function createOrder to take productname and product code as input
2. Create Class Order
Return object of type Order in case customer is eligible

Solution

from Customer import Customer
import re

# define exception for BlackListed Customer
class CustomerNotAllowed(Exception):
  def __init__(self, value):
    self.value = value
  def __str__(self):
    return repr(self.value)
## End of Exception
# function to process the data and return Customer object

def createCustomerObject(custdata):
# Extract title
  customer = Customer()
  match = re.search(' ([A-Za-z]+)\.', custdata) # Usage of regular Expression
  title = ""
  if( match is not None):
    title = match.group(0)
    customer.setTitle(title.strip())
  data = (custdata.replace(title,'')).split(',',2) # Removed the title from name
  customer.setLname(data[0].strip())
  customer.setFname(data[1].strip())
  customer.setIsblacklisted(data[2])
  return customer

# function to create order if user is not blacklisted else throw exception
def createOrder(customer,productname):
  if customer.isblacklisted == "1":
    #print("Raising Customer Exception")
    raise CustomerNotAllowed("Customer is Black Listed:" + customer.__str__())
  else:
    print(" Order created successfully for:" + customer.__str__())
### End of Function #####################
### Start of the flow ############
# Read the file
customer_file = open('FairDealCustomerData.csv','r')
customerlist = [] # list defined to store Customer Objects
for data in customer_file:
  customerlist.append(createCustomerObject(data.rstrip('\n')))
customer_file.close()
print ("No . of customers read from file:",len(customerlist))

# Create order for first two customers , 1st One is black listed
for i in range(0,2):
  try:
    createOrder(customerlist[i]," LEDTV")
  except CustomerNotAllowed as cne:
    print(" Exception Customer NotAllowed handled message", cne)

# finally:
print ("End of Program")

#Customer.py

class Customer:
  title = ""
  fname = ""
  lname = ""
  isblacklisted = 0;
  
  def __init__(self):
    self.title = ""

  def __str__(self):
    return "Title:" + self.title + " First Name:" + self.fname + " Last Name:" + self.lname + " Blacklisted:" + self.isblacklisted

  def setIsblacklisted(self,isblacklisted):
    self.isblacklisted = isblacklisted

  def isblacklisted(self):
    return self.isblacklisted

  def setTitle(self,title):
    self.title = title

  def getTitle(self):
    return self.title

  def setFname(self,fname):
    self.fname = fname

  def getFname(self):
    return self.fname

  def setLname(self,lname):
    self.lname = lname

  def getLname(self):
    return self.lname
# customer1 = Customer()
# customer1.setTitle("Mr.")
# customer1.setFname("Barack")
# customer1.setLname("Obama")
#
# customer2 = Customer()
# customer2.setTitle("Mrs.")
# customer2.setFname("George")
# customer2.setLname("Bush")
#
# print("First Customer Title %s" , customer1.getTitle())
# print("Second Customer Title %s" , customer2.getTitle())
# print("First Customer Title %s" , customer1.getTitle())
